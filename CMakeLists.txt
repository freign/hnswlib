cmake_minimum_required(VERSION 3.0...3.26)

set(CMAKE_CXX_STANDARD 17) # 设置C++标准为C++17
set(CMAKE_CXX_STANDARD_REQUIRED ON) # 确保编译器支持C++17

project(hnswlib
    LANGUAGES CXX)

include(GNUInstallDirs)
include(CheckCXXCompilerFlag)

add_library(hnswlib INTERFACE)
add_library(hnswlib::hnswlib ALIAS hnswlib)

target_include_directories(hnswlib INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)

# Install
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/hnswlib
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

install(TARGETS hnswlib
    EXPORT hnswlibTargets)

install(EXPORT hnswlibTargets
    FILE hnswlibConfig.cmake
    NAMESPACE hnswlib::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/hnswlib)

# Examples and tests
if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
    option(HNSWLIB_EXAMPLES "Build examples and tests." ON)
else()
    option(HNSWLIB_EXAMPLES "Build examples and tests." OFF)
endif()
# if(HNSWLIB_EXAMPLES)
#     set(CMAKE_CXX_STANDARD 17)

    # if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    #   SET( CMAKE_CXX_FLAGS  "-Ofast -std=c++17 -DHAVE_CXX0X -openmp -fpic -ftree-vectorize" )
    #   check_cxx_compiler_flag("-march=native" COMPILER_SUPPORT_NATIVE_FLAG)
    #   if(COMPILER_SUPPORT_NATIVE_FLAG)
    #     SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native" )
    #     message("set -march=native flag")
    #   else()
    #     check_cxx_compiler_flag("-mcpu=apple-m1" COMPILER_SUPPORT_M1_FLAG)
    #     if(COMPILER_SUPPORT_M1_FLAG)
    #       SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=apple-m1" )
    #       message("set -mcpu=apple-m1 flag")
    #     endif()
    #   endif()
    # elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    #   SET( CMAKE_CXX_FLAGS  "-Ofast -lrt -std=c++17 -DHAVE_CXX0X -march=native -fpic -w -fopenmp -ftree-vectorize -ftree-vectorizer-verbose=0" )
    # elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    #   SET( CMAKE_CXX_FLAGS  "/O2 -DHAVE_CXX0X /W1 /openmp /EHsc" )
    # endif()

    # # examples
    # add_executable(example_search examples/cpp/example_search.cpp)
    # target_link_libraries(example_search hnswlib)

    # add_executable(example_epsilon_search examples/cpp/example_epsilon_search.cpp)
    # target_link_libraries(example_epsilon_search hnswlib)

    # add_executable(example_multivector_search examples/cpp/example_multivector_search.cpp)
    # target_link_libraries(example_multivector_search hnswlib)

    # add_executable(example_filter examples/cpp/example_filter.cpp)
    # target_link_libraries(example_filter hnswlib)

    # add_executable(example_replace_deleted examples/cpp/example_replace_deleted.cpp)
    # target_link_libraries(example_replace_deleted hnswlib)

    # add_executable(example_mt_search examples/cpp/example_mt_search.cpp)
    # target_link_libraries(example_mt_search hnswlib)

    # add_executable(example_mt_filter examples/cpp/example_mt_filter.cpp)
    # target_link_libraries(example_mt_filter hnswlib)

    # add_executable(example_mt_replace_deleted examples/cpp/example_mt_replace_deleted.cpp)
    # target_link_libraries(example_mt_replace_deleted hnswlib)

    # # tests
    # add_executable(multivector_search_test tests/cpp/multivector_search_test.cpp)
    # target_link_libraries(multivector_search_test hnswlib)

    # add_executable(epsilon_search_test tests/cpp/epsilon_search_test.cpp)
    # target_link_libraries(epsilon_search_test hnswlib)

    # add_executable(test_updates tests/cpp/updates_test.cpp)
    # target_link_libraries(test_updates hnswlib)

    # add_executable(searchKnnCloserFirst_test tests/cpp/searchKnnCloserFirst_test.cpp)
    # target_link_libraries(searchKnnCloserFirst_test hnswlib)

    # add_executable(searchKnnWithFilter_test tests/cpp/searchKnnWithFilter_test.cpp)
    # target_link_libraries(searchKnnWithFilter_test hnswlib)

    # add_executable(multiThreadLoad_test tests/cpp/multiThreadLoad_test.cpp)
    # target_link_libraries(multiThreadLoad_test hnswlib)

    # add_executable(multiThread_replace_test tests/cpp/multiThread_replace_test.cpp)
    # target_link_libraries(multiThread_replace_test hnswlib)

    # add_executable(main tests/cpp/main.cpp tests/cpp/sift_1b.cpp)
    # target_link_libraries(main hnswlib)

    # endif()
  

option(ENABLE_DEBUG "Enable debug symbols" ON)

set(CMAKE_CXX_STANDARD 17)

if (ENABLE_DEBUG)
    SET( CMAKE_CXX_FLAGS  "-g -mavx2 -Ofast -std=c++17 -DHAVE_CXX0X -openmp -fpic -ftree-vectorize -fsanitize=address" )
else()
    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        SET( CMAKE_CXX_FLAGS  "-Ofast -std=c++17 -DHAVE_CXX0X -openmp -fpic -ftree-vectorize" )
        check_cxx_compiler_flag("-march=native" COMPILER_SUPPORT_NATIVE_FLAG)
        if(COMPILER_SUPPORT_NATIVE_FLAG)
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native" )
        message("set -march=native flag")
        else()
        check_cxx_compiler_flag("-mcpu=apple-m1" COMPILER_SUPPORT_M1_FLAG)
        if(COMPILER_SUPPORT_M1_FLAG)
            SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=apple-m1" )
            message("set -mcpu=apple-m1 flag")
        endif()
        endif()
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        SET( CMAKE_CXX_FLAGS  "-Ofast -lrt -std=c++17 -DHAVE_CXX0X -march=native -fpic -w -fopenmp -ftree-vectorize -ftree-vectorizer-verbose=0" )
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        SET( CMAKE_CXX_FLAGS  "/O2 -DHAVE_CXX0X /W1 /openmp /EHsc" )
    endif()
endif()

message(${CMAKE_CXX_FLAGS})

# if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
#   SET( CMAKE_CXX_FLAGS  "${DEBUG_FLAG} -Ofast -std=c++11 -DHAVE_CXX0X -openmp -fpic -ftree-vectorize" )
#   check_cxx_compiler_flag("-march=native" COMPILER_SUPPORT_NATIVE_FLAG)
#   if(COMPILER_SUPPORT_NATIVE_FLAG)
#     SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native" )
#     message("set -march=native flag")
#   else()
#     check_cxx_compiler_flag("-mcpu=apple-m1" COMPILER_SUPPORT_M1_FLAG)

#     if(COMPILER_SUPPORT_M1_FLAG)
#       SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=apple-m1" )
#       message("set -mcpu=apple-m1 flag")
#     endif()
#   endif()
# elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
#   SET( CMAKE_CXX_FLAGS  "${DEBUG_FLAG} -Ofast -lrt -std=c++11 -DHAVE_CXX0X -march=native -fpic -w -fopenmp -ftree-vectorize -ftree-vectorizer-verbose=0" )
# elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
#   # 注意：MSVC 使用 /DEBUG 标志来启用调试信息
#   if (ENABLE_DEBUG)
#     SET( CMAKE_CXX_FLAGS  "/DEBUG /O2 -DHAVE_CXX0X /W1 /openmp /EHsc" )
#   else()
#     SET( CMAKE_CXX_FLAGS  "/O2 -DHAVE_CXX0X /W1 /openmp /EHsc" )
#   endif()
# endif()


# if (ENABLE_DEBUG)
#   set(CMAKE_BUILD_TYPE Debug)
# else()
#   set(CMAKE_BUILD_TYPE Release)
# endif()
# SET( CMAKE_CXX_FLAGS  "-g -Ofast -std=c++17 -DHAVE_CXX0X -openmp -fpic -ftree-vectorize" )

set(EXPERIMENT_SOURCES
    experiment/pq_dist.cpp
    experiment/data_loader.cpp
    experiment/ArgParser.cpp
    experiment/dir_vector.cpp
    # experiment/k_means.cpp
)

# 包含必要的头文件目录
include_directories(/usr/local/include)
include_directories(${CMAKE_SOURCE_DIR}/hnswlib)
include_directories(${CMAKE_SOURCE_DIR}/experiment)

# 查找OpenMP包
find_package(OpenMP REQUIRED)
# 查找BLAS和LAPACK库
find_package(BLAS REQUIRED)
find_package(LAPACK REQUIRED)
# 查找Faiss库
find_path(FAISS_INCLUDE_DIR faiss/Index.h)
find_library(FAISS_LIBRARY faiss)

if (NOT FAISS_INCLUDE_DIR OR NOT FAISS_LIBRARY)#
    message(FATAL_ERROR "Faiss library not found")
endif()

include_directories(${FAISS_INCLUDE_DIR})

add_executable(experiment 
    experiment/experiment.cpp
    ${EXPERIMENT_SOURCES}
)
target_link_libraries(experiment
    OpenMP::OpenMP_CXX
    ${FAISS_LIBRARY}
    ${BLAS_LIBRARIES}
    ${LAPACK_LIBRARIES}
    hnswlib
)






# 链接OpenMP库，BLAS库，LAPACK库

